name: ${{values.app_name}}-cicd

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: self-hosted
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.vars.outputs.SHORT_SHA }}
    
    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ '${{ vars.DOCKERHUB_USERNAME }}' }}
          password: ${{ '${{ secrets.DOCKERHUB_TOKEN }}' }}

      - name: Get short SHA
        id: vars
        run: |
          SHA=$(git rev-parse --short=7 HEAD)
          echo "SHORT_SHA=$SHA" >> "$GITHUB_OUTPUT"

      - name: Build and push
        run: |
          docker build -t duarpax18/python-app:latest -t duarpax18/python-app:${{ '${{ steps.vars.outputs.SHORT_SHA }}' }} .
          docker push duarpax18/python-app:latest
          docker push duarpax18/python-app:${{ '${{ steps.vars.outputs.SHORT_SHA }}' }}
      
  deploy-dev:
    runs-on: self-hosted
    permissions:
      contents: write
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short SHA (deploy)
        id: deploy_vars
        run: |
          SHA=$(git rev-parse --short=7 HEAD)
          echo "SHORT_SHA=$SHA" >> "$GITHUB_OUTPUT"

      - name: Update Helm chart and push to Git
        env:
          NEW_IMAGE_TAG: ${{ '${{ steps.deploy_vars.outputs.SHORT_SHA }}' }}
        run: |
          echo "Updating image tag to ${{ '${{ env.NEW_IMAGE_TAG }}' }}"

          # Configurar o Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Atualizar o arquivo values.yaml
          sed -i "s/^\(\s*tag:\s*\).*/\1\"${NEW_IMAGE_TAG}\"/" charts/${{ values.app_name }}/values-${{values.app_env}}.yaml
          
          echo "charts/${{ values.app_name }}/values-${{ values.app_env }}.yaml after update:"
          cat charts/${{ values.app_name }}/values-${{ values.app_env }}.yaml

          # Fazer commit e push
          git add charts/${{ values.app_name }}/values-${{ values.app_env }}.yaml
          git commit -m "ci: Update python-app image to tag ${{ '${{ env.NEW_IMAGE_TAG }}' }}" || echo "No changes to commit"
          git push || echo "Nothing to push"

      - name: Install ArgoCD CLI
        env:
          ARGOCD_VERSION: v2.11.4
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          curl -sSL -o "$HOME/.local/bin/argocd" "https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}/argocd-linux-amd64"
          chmod +x "$HOME/.local/bin/argocd"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          argocd version --client

      - name: Login to ArgoCD
        env:
          ARGOCD_USERNAME: ${{ '${{ secrets.ARGOCD_USERNAME }}' }}
          ARGOCD_PASSWORD: ${{ '${{ secrets.ARGOCD_PASSWORD }}' }}
        run: |
          set -euo pipefail
          USERNAME="${ARGOCD_USERNAME:-admin}"
          argocd login argocd-server.argocd.svc:443 --username "$USERNAME" --password "$ARGOCD_PASSWORD" --insecure --grpc-web

      - name: ArgoCD Create App
        run: |
          set -euo pipefail
          REPO_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git"
          argocd app get ${{ values.app_name }}-${{ values.app_env }} || argocd app create ${{ values.app_name }}-${{ values.app_env }} --repo "$REPO_URL" --path charts/${{ values.app_name }} --dest-server https://kubernetes.default.svc --dest-namespace ${{ values.app_name }}-${{ values.app_env }} --sync-policy automated --self-heal --revision main --auto-prune --allow-empty --values values-${{ values.app_env }}.yaml CreateNamespace=true

      - name: ArgoCD Sync
        run: |
          argocd app sync ${{ values.app_name }}-${{ values.app_env }}

      - name: ArgoCD Wait for Sync
        run: |
          argocd app wait ${{ values.app_name }}-${{ values.app_env }} --health --timeout 300